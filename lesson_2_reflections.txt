Q1. What happens when you initialize a repository? Why do you need to do it?

A1. It created a new repository as it is the first step for version control and
start tracking versions and act the GIT functions.

Q2. How is the staging area different from the working directory and the repository?
What value do you think it offers?

A2. It is an intermediate stage which contains all the files you want to commit
once you are decided to commit, you just commit those in the staging area.
It is a preparation stage in which do a virtual commit but has the option to
rethink it or approve it.

Q3. How can you use the staging area to make sure you have one commit per logical change?

A3. "git diff --staged" compares the files in staging area with the last committed
files. "git diff" compares the files in the working directory and those in the staged area.
while "git diff first_id second_id" compares between two commits.

Q4. What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

A4. branches are used when we want to a separate edition of the current files
without losing the original files. "git branch branch_name" to create a new file
"git checkout branch_name" to commit changes to this branch and "git branch" to
see the branches you have and which one is checked out.

Q5. How do the diagrams help you visualize the branch structure?

A5. flowchart diagrams acts like a tree makes it easy to understand

Q6.What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

A6. it combines the two files together; in which adds the common lines and then
the new lines that were newly added; but do not the case when there some files
were deleted from the original version. Pretty obvious  
